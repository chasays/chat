// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: chat_api.sql

package sqlc_queries

import (
	"context"
	"database/sql"
)

const chatAPIByID = `-- name: ChatAPIByID :one
SELECT id, name, url, auth_header, auth_key FROM chat_api WHERE id = $1
`

func (q *Queries) ChatAPIByID(ctx context.Context, id int32) (ChatApi, error) {
	row := q.db.QueryRowContext(ctx, chatAPIByID, id)
	var i ChatApi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.AuthHeader,
		&i.AuthKey,
	)
	return i, err
}

const createChatAPI = `-- name: CreateChatAPI :one
INSERT INTO chat_api (name, url, auth_header, auth_key)
VALUES ($1, $2, $3, $4)
RETURNING id, name, url, auth_header, auth_key
`

type CreateChatAPIParams struct {
	Name       string
	Url        string
	AuthHeader sql.NullString
	AuthKey    sql.NullString
}

func (q *Queries) CreateChatAPI(ctx context.Context, arg CreateChatAPIParams) (ChatApi, error) {
	row := q.db.QueryRowContext(ctx, createChatAPI,
		arg.Name,
		arg.Url,
		arg.AuthHeader,
		arg.AuthKey,
	)
	var i ChatApi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.AuthHeader,
		&i.AuthKey,
	)
	return i, err
}

const deleteChatAPI = `-- name: DeleteChatAPI :exec
DELETE FROM chat_api WHERE id = $1
`

func (q *Queries) DeleteChatAPI(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteChatAPI, id)
	return err
}

const listChatAPIs = `-- name: ListChatAPIs :many
SELECT id, name, url, auth_header, auth_key FROM chat_api ORDER BY id
`

func (q *Queries) ListChatAPIs(ctx context.Context) ([]ChatApi, error) {
	rows, err := q.db.QueryContext(ctx, listChatAPIs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatApi
	for rows.Next() {
		var i ChatApi
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.AuthHeader,
			&i.AuthKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatAPI = `-- name: UpdateChatAPI :one
UPDATE chat_api SET name = $2, url = $3, auth_header = $4, auth_key = $5
WHERE id = $1
RETURNING id, name, url, auth_header, auth_key
`

type UpdateChatAPIParams struct {
	ID         int32
	Name       string
	Url        string
	AuthHeader sql.NullString
	AuthKey    sql.NullString
}

func (q *Queries) UpdateChatAPI(ctx context.Context, arg UpdateChatAPIParams) (ChatApi, error) {
	row := q.db.QueryRowContext(ctx, updateChatAPI,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.AuthHeader,
		arg.AuthKey,
	)
	var i ChatApi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.AuthHeader,
		&i.AuthKey,
	)
	return i, err
}
